library(knitr)
here::i_am("code/ppg.R")
ppg <- read.csv("C:/Users/pengfei lou/Desktop/final_project_4/data/bangle.csv")
kable(summary(ppg))
library(ggplot2)
ppg[,1]<-ppg[,1]-ppg[1,1]
ppg$timestamp_ms<-ppg$timestamp_ms/1000
scatterplot<-ggplot(ppg, aes(x = timestamp_ms, y = value))+geom_line()+geom_point(color = "red", size = 0.5) +
labs(x = "Timestamp (ms)", y = "PPG Signal Value", title = "Raw PPG Signal with Detected Peaks") +
theme_minimal()
ggsave(
plot=scatterplot,
device='png',
file.path(here::here("output/scatterplot.png"))
)
library(here)
here::i_am(
"code/render_report.R"
)
rmarkdown::render("report.Rmd", output_file = "report.html")
library(knitr)
# Load the CSV file containing PPG data into a data frame named 'ppg'
ppg <- read.csv("C:/Users/pengfei lou/Desktop/final_project_4/data/bangle.csv")
kable(summary(ppg))
# Load the ggplot2 library for data visualization
library(ggplot2)
# Subtract the first timestamp value from all timestamp values in the 'timestamp_ms' column
ppg[, 1] <- ppg[, 1] - ppg[1, 1]
# Convert the 'timestamp_ms' values from milliseconds to seconds
ppg$timestamp_ms <- ppg$timestamp_ms / 1000
# Create a ggplot with 'timestamp_ms' on the x-axis and 'value' on the y-axis, and add a line and points
ggplot(ppg, aes(x = timestamp_ms, y = value)) +
geom_line() +               # Add a line to the plot
geom_point(color = "red", size = 0.5) +  # Add red points to the plot
labs(x = "Timestamp (ms)",   # Label for the x-axis
y = "PPG Signal Value",  # Label for the y-axis
title = "Raw PPG Signal with Detected Peaks") +  # Title for the plot
theme_minimal()  # Use the minimal theme for the plot
# Load the ggplot2 library for data visualization
library(ggplot2)
# Subtract the first timestamp value from all timestamp values in the 'timestamp_ms' column
ppg[, 1] <- ppg[, 1] - ppg[1, 1]
# Convert the 'timestamp_ms' values from milliseconds to seconds
ppg$timestamp_ms <- ppg$timestamp_ms / 1000
# Create a ggplot with 'timestamp_ms' on the x-axis and 'value' on the y-axis, and add a line and points
ggplot(ppg, aes(x = timestamp_ms, y = value)) +
geom_line() +               # Add a line to the plot
geom_point(color = "red", size = 0.5) +  # Add red points to the plot
labs(x = "Timestamp (ms)",   # Label for the x-axis
y = "PPG Signal Value",  # Label for the y-axis
title = "Raw PPG Signal with Detected Peaks") +  # Title for the plot
theme_minimal()  # Use the minimal theme for the plot
library(here)
library(knitr)
here::i_am("code/ppg.R")
ppg <- read.csv("C:/Users/pengfei lou/Desktop/final_project_4/data/bangle.csv")
table_one<-kable(summary(ppg))
saveRDS(
table_one,
file = here::here("output/table_one.rds") )
library(here)
library(knitr)
here::i_am("code/ppg.R")
ppg <- read.csv("C:/Users/pengfei lou/Desktop/final_project_4/data/bangle.csv")
kable(summary(ppg))
library(ggplot2)
ppg[,1]<-ppg[,1]-ppg[1,1]
ppg$timestamp_ms<-ppg$timestamp_ms/1000
scatterplot<-ggplot(ppg, aes(x = timestamp_ms, y = value))+geom_line()+geom_point(color = "red", size = 0.5) +
labs(x = "Timestamp (ms)", y = "PPG Signal Value", title = "Raw PPG Signal with Detected Peaks") +
theme_minimal()
ggsave(
plot=scatterplot,
device='png',
file.path(here::here("output/scatterplot.png"))
)
library(here)
library(knitr)
here::i_am("code/ppg.R")
ppg <- read.csv("C:/Users/pengfei lou/Desktop/final_project_4/data/bangle.csv")
table_one<-kable(summary(ppg))
saveRDS(
table_one,
file = here::here("output/table_one.rds") )
library(here)
here::i_am(
"code/render_report.R"
)
rmarkdown::render("report.Rmd", output_file = "report.html")
library(here)
here::i_am(
"render_report.R"
)
rmarkdown::render("report.Rmd", output_file = "report.html")
library(here)
here::i_am(
"render_report.R"
)
rmarkdown::render("report.Rmd", output_file = "report.html")
library(here)
here::i_am(
"render_report.R"
)
rmarkdown::render("report.Rmd", output_file = "report.html")
file.exists(here("report.Rmd")) # Check if the file exists
print(here("report.Rmd")) # This will show the full path being used
library(here)
here::i_am(
"render_report.R"
)
rmarkdown::render("report.Rmd", output_file = "report.html")
library(here)
here::i_am(
"code/render_report.R"
)
rmarkdown::render("report.Rmd", output_file = "report.html")
library(here)
here::i_am(
"code/render_report.R"
)
rmarkdown::render("final_report_4/report.Rmd", output_file = "report.html")
library(here)
library(here)
here::i_am(
"code/render_report.R"
)
rmarkdown::render("report.Rmd", output_file = "report.html")
library(here)
here::i_am(
"code/render_report.R"
)
rmarkdown::render(
here::here("report.Rmd")
)
